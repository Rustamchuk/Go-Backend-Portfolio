// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: flood.proto

package flood_control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FloodControlService_Check_FullMethodName = "/flood_control.FloodControlService/Check"
)

// FloodControlServiceClient is the client API for FloodControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FloodControlServiceClient interface {
	// Метод для проверки лимита запросов
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type floodControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFloodControlServiceClient(cc grpc.ClientConnInterface) FloodControlServiceClient {
	return &floodControlServiceClient{cc}
}

func (c *floodControlServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, FloodControlService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FloodControlServiceServer is the server API for FloodControlService service.
// All implementations must embed UnimplementedFloodControlServiceServer
// for forward compatibility
type FloodControlServiceServer interface {
	// Метод для проверки лимита запросов
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedFloodControlServiceServer()
}

// UnimplementedFloodControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFloodControlServiceServer struct {
}

func (UnimplementedFloodControlServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedFloodControlServiceServer) mustEmbedUnimplementedFloodControlServiceServer() {}

// UnsafeFloodControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FloodControlServiceServer will
// result in compilation errors.
type UnsafeFloodControlServiceServer interface {
	mustEmbedUnimplementedFloodControlServiceServer()
}

func RegisterFloodControlServiceServer(s grpc.ServiceRegistrar, srv FloodControlServiceServer) {
	s.RegisterService(&FloodControlService_ServiceDesc, srv)
}

func _FloodControlService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloodControlServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FloodControlService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloodControlServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FloodControlService_ServiceDesc is the grpc.ServiceDesc for FloodControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FloodControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flood_control.FloodControlService",
	HandlerType: (*FloodControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _FloodControlService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flood.proto",
}
